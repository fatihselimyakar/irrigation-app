{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useUtils } from \"../useUtils.js\";\nimport { changeSectionValueFormat, cleanDigitSectionValue, doesSectionFormatHaveLeadingZeros, getDateSectionConfigFromFormatToken, getDaysInWeekStr, getLetterEditingOptions, applyLocalizedDigits, removeLocalizedDigits, isStringNumber } from \"./useField.utils.js\";\n\n/**\n * The letter editing and the numeric editing each define a `CharacterEditingApplier`.\n * This function decides what the new section value should be and if the focus should switch to the next section.\n *\n * If it returns `null`, then the section value is not updated and the focus does not move.\n */\n\n/**\n * Function called by `applyQuery` which decides:\n * - what is the new section value ?\n * - should the query used to get this value be stored for the next key press ?\n *\n * If it returns `{ sectionValue: string; shouldGoToNextSection: boolean }`,\n * Then we store the query and update the section with the new value.\n *\n * If it returns `{ saveQuery: true` },\n * Then we store the query and don't update the section.\n *\n * If it returns `{ saveQuery: false },\n * Then we do nothing.\n */\n\nconst QUERY_LIFE_DURATION_MS = 5000;\nconst isQueryResponseWithoutValue = response => response.saveQuery != null;\n\n/**\n * Update the active section value when the user pressed a key that is not a navigation key (arrow key for example).\n * This hook has two main editing behaviors\n *\n * 1. The numeric editing when the user presses a digit\n * 2. The letter editing when the user presses another key\n */\nexport const useFieldCharacterEditing = _ref => {\n  let {\n    sections,\n    updateSectionValue,\n    sectionsValueBoundaries,\n    localizedDigits,\n    setTempAndroidValueStr,\n    timezone\n  } = _ref;\n  const utils = useUtils();\n  const [query, setQuery] = React.useState(null);\n  const resetQuery = useEventCallback(() => setQuery(null));\n  React.useEffect(() => {\n    if (query != null && sections[query.sectionIndex]?.type !== query.sectionType) {\n      resetQuery();\n    }\n  }, [sections, query, resetQuery]);\n  React.useEffect(() => {\n    if (query != null) {\n      const timeout = setTimeout(() => resetQuery(), QUERY_LIFE_DURATION_MS);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n    return () => {};\n  }, [query, resetQuery]);\n  const applyQuery = (_ref2, getFirstSectionValueMatchingWithQuery, isValidQueryValue) => {\n    let {\n      keyPressed,\n      sectionIndex\n    } = _ref2;\n    const cleanKeyPressed = keyPressed.toLowerCase();\n    const activeSection = sections[sectionIndex];\n\n    // The current query targets the section being editing\n    // We can try to concatenate the value\n    if (query != null && (!isValidQueryValue || isValidQueryValue(query.value)) && query.sectionIndex === sectionIndex) {\n      const concatenatedQueryValue = `${query.value}${cleanKeyPressed}`;\n      const queryResponse = getFirstSectionValueMatchingWithQuery(concatenatedQueryValue, activeSection);\n      if (!isQueryResponseWithoutValue(queryResponse)) {\n        setQuery({\n          sectionIndex,\n          value: concatenatedQueryValue,\n          sectionType: activeSection.type\n        });\n        return queryResponse;\n      }\n    }\n    const queryResponse = getFirstSectionValueMatchingWithQuery(cleanKeyPressed, activeSection);\n    if (isQueryResponseWithoutValue(queryResponse) && !queryResponse.saveQuery) {\n      resetQuery();\n      return null;\n    }\n    setQuery({\n      sectionIndex,\n      value: cleanKeyPressed,\n      sectionType: activeSection.type\n    });\n    if (isQueryResponseWithoutValue(queryResponse)) {\n      return null;\n    }\n    return queryResponse;\n  };\n  const applyLetterEditing = params => {\n    const findMatchingOptions = (format, options, queryValue) => {\n      const matchingValues = options.filter(option => option.toLowerCase().startsWith(queryValue));\n      if (matchingValues.length === 0) {\n        return {\n          saveQuery: false\n        };\n      }\n      return {\n        sectionValue: matchingValues[0],\n        shouldGoToNextSection: matchingValues.length === 1\n      };\n    };\n    const testQueryOnFormatAndFallbackFormat = (queryValue, activeSection, fallbackFormat, formatFallbackValue) => {\n      const getOptions = format => getLetterEditingOptions(utils, timezone, activeSection.type, format);\n      if (activeSection.contentType === 'letter') {\n        return findMatchingOptions(activeSection.format, getOptions(activeSection.format), queryValue);\n      }\n\n      // When editing a digit-format month / weekDay and the user presses a letter,\n      // We can support the letter editing by using the letter-format month / weekDay and re-formatting the result.\n      // We just have to make sure that the default month / weekDay format is a letter format,\n      if (fallbackFormat && formatFallbackValue != null && getDateSectionConfigFromFormatToken(utils, fallbackFormat).contentType === 'letter') {\n        const fallbackOptions = getOptions(fallbackFormat);\n        const response = findMatchingOptions(fallbackFormat, fallbackOptions, queryValue);\n        if (isQueryResponseWithoutValue(response)) {\n          return {\n            saveQuery: false\n          };\n        }\n        return _extends({}, response, {\n          sectionValue: formatFallbackValue(response.sectionValue, fallbackOptions)\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      switch (activeSection.type) {\n        case 'month':\n          {\n            const formatFallbackValue = fallbackValue => changeSectionValueFormat(utils, fallbackValue, utils.formats.month, activeSection.format);\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.month, formatFallbackValue);\n          }\n        case 'weekDay':\n          {\n            const formatFallbackValue = (fallbackValue, fallbackOptions) => fallbackOptions.indexOf(fallbackValue).toString();\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.weekday, formatFallbackValue);\n          }\n        case 'meridiem':\n          {\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection);\n          }\n        default:\n          {\n            return {\n              saveQuery: false\n            };\n          }\n      }\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery);\n  };\n  const applyNumericEditing = params => {\n    const getNewSectionValue = (queryValue, section) => {\n      const cleanQueryValue = removeLocalizedDigits(queryValue, localizedDigits);\n      const queryValueNumber = Number(cleanQueryValue);\n      const sectionBoundaries = sectionsValueBoundaries[section.type]({\n        currentDate: null,\n        format: section.format,\n        contentType: section.contentType\n      });\n      if (queryValueNumber > sectionBoundaries.maximum) {\n        return {\n          saveQuery: false\n        };\n      }\n\n      // If the user types `0` on a month section,\n      // It is below the minimum, but we want to store the `0` in the query,\n      // So that when he pressed `1`, it will store `01` and move to the next section.\n      if (queryValueNumber < sectionBoundaries.minimum) {\n        return {\n          saveQuery: true\n        };\n      }\n      const shouldGoToNextSection = queryValueNumber * 10 > sectionBoundaries.maximum || cleanQueryValue.length === sectionBoundaries.maximum.toString().length;\n      const newSectionValue = cleanDigitSectionValue(utils, queryValueNumber, sectionBoundaries, localizedDigits, section);\n      return {\n        sectionValue: newSectionValue,\n        shouldGoToNextSection\n      };\n    };\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      if (activeSection.contentType === 'digit' || activeSection.contentType === 'digit-with-letter') {\n        return getNewSectionValue(queryValue, activeSection);\n      }\n\n      // When editing a letter-format month and the user presses a digit,\n      // We can support the numeric editing by using the digit-format month and re-formatting the result.\n      if (activeSection.type === 'month') {\n        const hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(utils, timezone, 'digit', 'month', 'MM');\n        const response = getNewSectionValue(queryValue, {\n          type: activeSection.type,\n          format: 'MM',\n          hasLeadingZerosInFormat,\n          hasLeadingZerosInInput: true,\n          contentType: 'digit',\n          maxLength: 2\n        });\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        const formattedValue = changeSectionValueFormat(utils, response.sectionValue, 'MM', activeSection.format);\n        return _extends({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n\n      // When editing a letter-format weekDay and the user presses a digit,\n      // We can support the numeric editing by returning the nth day in the week day array.\n      if (activeSection.type === 'weekDay') {\n        const response = getNewSectionValue(queryValue, activeSection);\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        const formattedValue = getDaysInWeekStr(utils, timezone, activeSection.format)[Number(response.sectionValue) - 1];\n        return _extends({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery, queryValue => isStringNumber(queryValue, localizedDigits));\n  };\n  const applyCharacterEditing = useEventCallback(params => {\n    const activeSection = sections[params.sectionIndex];\n    const isNumericEditing = isStringNumber(params.keyPressed, localizedDigits);\n    const response = isNumericEditing ? applyNumericEditing(_extends({}, params, {\n      keyPressed: applyLocalizedDigits(params.keyPressed, localizedDigits)\n    })) : applyLetterEditing(params);\n    if (response == null) {\n      setTempAndroidValueStr(null);\n      return;\n    }\n    updateSectionValue({\n      activeSection,\n      newSectionValue: response.sectionValue,\n      shouldGoToNextSection: response.shouldGoToNextSection\n    });\n  });\n  return {\n    applyCharacterEditing,\n    resetCharacterQuery: resetQuery\n  };\n};","map":{"version":3,"names":["_extends","React","useEventCallback","useUtils","changeSectionValueFormat","cleanDigitSectionValue","doesSectionFormatHaveLeadingZeros","getDateSectionConfigFromFormatToken","getDaysInWeekStr","getLetterEditingOptions","applyLocalizedDigits","removeLocalizedDigits","isStringNumber","QUERY_LIFE_DURATION_MS","isQueryResponseWithoutValue","response","saveQuery","useFieldCharacterEditing","_ref","sections","updateSectionValue","sectionsValueBoundaries","localizedDigits","setTempAndroidValueStr","timezone","utils","query","setQuery","useState","resetQuery","useEffect","sectionIndex","type","sectionType","timeout","setTimeout","clearTimeout","applyQuery","_ref2","getFirstSectionValueMatchingWithQuery","isValidQueryValue","keyPressed","cleanKeyPressed","toLowerCase","activeSection","value","concatenatedQueryValue","queryResponse","applyLetterEditing","params","findMatchingOptions","format","options","queryValue","matchingValues","filter","option","startsWith","length","sectionValue","shouldGoToNextSection","testQueryOnFormatAndFallbackFormat","fallbackFormat","formatFallbackValue","getOptions","contentType","fallbackOptions","fallbackValue","formats","month","indexOf","toString","weekday","applyNumericEditing","getNewSectionValue","section","cleanQueryValue","queryValueNumber","Number","sectionBoundaries","currentDate","maximum","minimum","newSectionValue","hasLeadingZerosInFormat","hasLeadingZerosInInput","maxLength","formattedValue","applyCharacterEditing","isNumericEditing","resetCharacterQuery"],"sources":["/Users/fatihselimyakar/fsy-workspace/react-playground/irrigation-app/node_modules/@mui/x-date-pickers/internals/hooks/useField/useFieldCharacterEditing.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useUtils } from \"../useUtils.js\";\nimport { changeSectionValueFormat, cleanDigitSectionValue, doesSectionFormatHaveLeadingZeros, getDateSectionConfigFromFormatToken, getDaysInWeekStr, getLetterEditingOptions, applyLocalizedDigits, removeLocalizedDigits, isStringNumber } from \"./useField.utils.js\";\n\n/**\n * The letter editing and the numeric editing each define a `CharacterEditingApplier`.\n * This function decides what the new section value should be and if the focus should switch to the next section.\n *\n * If it returns `null`, then the section value is not updated and the focus does not move.\n */\n\n/**\n * Function called by `applyQuery` which decides:\n * - what is the new section value ?\n * - should the query used to get this value be stored for the next key press ?\n *\n * If it returns `{ sectionValue: string; shouldGoToNextSection: boolean }`,\n * Then we store the query and update the section with the new value.\n *\n * If it returns `{ saveQuery: true` },\n * Then we store the query and don't update the section.\n *\n * If it returns `{ saveQuery: false },\n * Then we do nothing.\n */\n\nconst QUERY_LIFE_DURATION_MS = 5000;\nconst isQueryResponseWithoutValue = response => response.saveQuery != null;\n\n/**\n * Update the active section value when the user pressed a key that is not a navigation key (arrow key for example).\n * This hook has two main editing behaviors\n *\n * 1. The numeric editing when the user presses a digit\n * 2. The letter editing when the user presses another key\n */\nexport const useFieldCharacterEditing = ({\n  sections,\n  updateSectionValue,\n  sectionsValueBoundaries,\n  localizedDigits,\n  setTempAndroidValueStr,\n  timezone\n}) => {\n  const utils = useUtils();\n  const [query, setQuery] = React.useState(null);\n  const resetQuery = useEventCallback(() => setQuery(null));\n  React.useEffect(() => {\n    if (query != null && sections[query.sectionIndex]?.type !== query.sectionType) {\n      resetQuery();\n    }\n  }, [sections, query, resetQuery]);\n  React.useEffect(() => {\n    if (query != null) {\n      const timeout = setTimeout(() => resetQuery(), QUERY_LIFE_DURATION_MS);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n    return () => {};\n  }, [query, resetQuery]);\n  const applyQuery = ({\n    keyPressed,\n    sectionIndex\n  }, getFirstSectionValueMatchingWithQuery, isValidQueryValue) => {\n    const cleanKeyPressed = keyPressed.toLowerCase();\n    const activeSection = sections[sectionIndex];\n\n    // The current query targets the section being editing\n    // We can try to concatenate the value\n    if (query != null && (!isValidQueryValue || isValidQueryValue(query.value)) && query.sectionIndex === sectionIndex) {\n      const concatenatedQueryValue = `${query.value}${cleanKeyPressed}`;\n      const queryResponse = getFirstSectionValueMatchingWithQuery(concatenatedQueryValue, activeSection);\n      if (!isQueryResponseWithoutValue(queryResponse)) {\n        setQuery({\n          sectionIndex,\n          value: concatenatedQueryValue,\n          sectionType: activeSection.type\n        });\n        return queryResponse;\n      }\n    }\n    const queryResponse = getFirstSectionValueMatchingWithQuery(cleanKeyPressed, activeSection);\n    if (isQueryResponseWithoutValue(queryResponse) && !queryResponse.saveQuery) {\n      resetQuery();\n      return null;\n    }\n    setQuery({\n      sectionIndex,\n      value: cleanKeyPressed,\n      sectionType: activeSection.type\n    });\n    if (isQueryResponseWithoutValue(queryResponse)) {\n      return null;\n    }\n    return queryResponse;\n  };\n  const applyLetterEditing = params => {\n    const findMatchingOptions = (format, options, queryValue) => {\n      const matchingValues = options.filter(option => option.toLowerCase().startsWith(queryValue));\n      if (matchingValues.length === 0) {\n        return {\n          saveQuery: false\n        };\n      }\n      return {\n        sectionValue: matchingValues[0],\n        shouldGoToNextSection: matchingValues.length === 1\n      };\n    };\n    const testQueryOnFormatAndFallbackFormat = (queryValue, activeSection, fallbackFormat, formatFallbackValue) => {\n      const getOptions = format => getLetterEditingOptions(utils, timezone, activeSection.type, format);\n      if (activeSection.contentType === 'letter') {\n        return findMatchingOptions(activeSection.format, getOptions(activeSection.format), queryValue);\n      }\n\n      // When editing a digit-format month / weekDay and the user presses a letter,\n      // We can support the letter editing by using the letter-format month / weekDay and re-formatting the result.\n      // We just have to make sure that the default month / weekDay format is a letter format,\n      if (fallbackFormat && formatFallbackValue != null && getDateSectionConfigFromFormatToken(utils, fallbackFormat).contentType === 'letter') {\n        const fallbackOptions = getOptions(fallbackFormat);\n        const response = findMatchingOptions(fallbackFormat, fallbackOptions, queryValue);\n        if (isQueryResponseWithoutValue(response)) {\n          return {\n            saveQuery: false\n          };\n        }\n        return _extends({}, response, {\n          sectionValue: formatFallbackValue(response.sectionValue, fallbackOptions)\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      switch (activeSection.type) {\n        case 'month':\n          {\n            const formatFallbackValue = fallbackValue => changeSectionValueFormat(utils, fallbackValue, utils.formats.month, activeSection.format);\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.month, formatFallbackValue);\n          }\n        case 'weekDay':\n          {\n            const formatFallbackValue = (fallbackValue, fallbackOptions) => fallbackOptions.indexOf(fallbackValue).toString();\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.weekday, formatFallbackValue);\n          }\n        case 'meridiem':\n          {\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection);\n          }\n        default:\n          {\n            return {\n              saveQuery: false\n            };\n          }\n      }\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery);\n  };\n  const applyNumericEditing = params => {\n    const getNewSectionValue = (queryValue, section) => {\n      const cleanQueryValue = removeLocalizedDigits(queryValue, localizedDigits);\n      const queryValueNumber = Number(cleanQueryValue);\n      const sectionBoundaries = sectionsValueBoundaries[section.type]({\n        currentDate: null,\n        format: section.format,\n        contentType: section.contentType\n      });\n      if (queryValueNumber > sectionBoundaries.maximum) {\n        return {\n          saveQuery: false\n        };\n      }\n\n      // If the user types `0` on a month section,\n      // It is below the minimum, but we want to store the `0` in the query,\n      // So that when he pressed `1`, it will store `01` and move to the next section.\n      if (queryValueNumber < sectionBoundaries.minimum) {\n        return {\n          saveQuery: true\n        };\n      }\n      const shouldGoToNextSection = queryValueNumber * 10 > sectionBoundaries.maximum || cleanQueryValue.length === sectionBoundaries.maximum.toString().length;\n      const newSectionValue = cleanDigitSectionValue(utils, queryValueNumber, sectionBoundaries, localizedDigits, section);\n      return {\n        sectionValue: newSectionValue,\n        shouldGoToNextSection\n      };\n    };\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      if (activeSection.contentType === 'digit' || activeSection.contentType === 'digit-with-letter') {\n        return getNewSectionValue(queryValue, activeSection);\n      }\n\n      // When editing a letter-format month and the user presses a digit,\n      // We can support the numeric editing by using the digit-format month and re-formatting the result.\n      if (activeSection.type === 'month') {\n        const hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(utils, timezone, 'digit', 'month', 'MM');\n        const response = getNewSectionValue(queryValue, {\n          type: activeSection.type,\n          format: 'MM',\n          hasLeadingZerosInFormat,\n          hasLeadingZerosInInput: true,\n          contentType: 'digit',\n          maxLength: 2\n        });\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        const formattedValue = changeSectionValueFormat(utils, response.sectionValue, 'MM', activeSection.format);\n        return _extends({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n\n      // When editing a letter-format weekDay and the user presses a digit,\n      // We can support the numeric editing by returning the nth day in the week day array.\n      if (activeSection.type === 'weekDay') {\n        const response = getNewSectionValue(queryValue, activeSection);\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        const formattedValue = getDaysInWeekStr(utils, timezone, activeSection.format)[Number(response.sectionValue) - 1];\n        return _extends({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery, queryValue => isStringNumber(queryValue, localizedDigits));\n  };\n  const applyCharacterEditing = useEventCallback(params => {\n    const activeSection = sections[params.sectionIndex];\n    const isNumericEditing = isStringNumber(params.keyPressed, localizedDigits);\n    const response = isNumericEditing ? applyNumericEditing(_extends({}, params, {\n      keyPressed: applyLocalizedDigits(params.keyPressed, localizedDigits)\n    })) : applyLetterEditing(params);\n    if (response == null) {\n      setTempAndroidValueStr(null);\n      return;\n    }\n    updateSectionValue({\n      activeSection,\n      newSectionValue: response.sectionValue,\n      shouldGoToNextSection: response.shouldGoToNextSection\n    });\n  });\n  return {\n    applyCharacterEditing,\n    resetCharacterQuery: resetQuery\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}